---

- block:
  - name: get cluster '{{ os_cluster.key }}' vm count
    set_fact:
      os_cluster_vm_count: "{{ os_cluster.value | map(attribute='count') | join(',') }}"
  rescue:
  - name: set cluster '{{ os_cluster.key }}' vm count to '3'
    set_fact:
      os_cluster_vm_count: 3


- block:
  - name: get cluster '{{ os_cluster.key }}' img
    set_fact:
      os_cluster_image: "{{ os_cluster.value | map(attribute='img') | join(',') }}"
  rescue:
  - block:
    - name: get cluster '{{ os_cluster.key }}' image
      set_fact:
        os_cluster_image: "{{ os_cluster.value | map(attribute='image') | join(',') }}"
    rescue:
    - name: set cluster '{{ os_cluster.key }}' image to 'ubuntu'
      set_fact:
        os_cluster_image: '{{ ubuntu }}'


- block:
  - name: get cluster '{{ os_cluster.key }}' fv
    set_fact:
      os_cluster_flavor: "{{ os_cluster.value | map(attribute='fv') | join(',') }}"
  rescue:
  - block:
    - name: get cluster '{{ os_cluster.key }}' flavor
      set_fact:
        os_cluster_flavor: "{{ os_cluster.value | map(attribute='flavor') | join(',') }}"
    rescue:
    - name: set cluster '{{ os_cluster.key }}' flavor to '{{ fv_default }}'
      set_fact:
        os_cluster_flavor: '{{ fv_default }}'


- block:
  - name: get cluster '{{ os_cluster.key }}' gr
    set_fact:
      os_cluster_groups=: "{{ os_cluster.value | map(attribute='gr') | join(',') }}"
  rescue:
  - block:
    - name: get cluster '{{ os_cluster.key }}' groups
      set_fact:
        os_cluster_groups: "{{ os_cluster.value | map(attribute='groups') | join(',') }}"
    rescue:
    - name: set cluster '{{ os_cluster.key }}' groups to '{{ os_cluster.key }}'
      set_fact:
        os_cluster_groups: '{{ os_cluster.key }}'


- block:
  - name: get cluster '{{ os_cluster.key }}' state
    set_fact:
      os_cluster_state: "{{ os_cluster.value | map(attribute='state') | join(',') }}"
  rescue:
  - name: set cluster '{{ os_cluster.key }}' state to 'present'
    set_fact:
      os_cluster_state: 'present'


- block:
  - name: get cluster '{{ os_cluster.key }}' sg
    set_fact:
      os_cluster_security_groups: "{{ os_cluster.value | map(attribute='sg') | join(',') }}"
  rescue:
  - block:
    - name: get cluster '{{ os_cluster.key }}' security groups
      set_fact:
        os_cluster_security_groups: "{{ os_cluster.value | map(attribute='security_groups') | join(',') }}"
    rescue:
    - name: set cluster '{{ os_cluster.key }}' security groups to '{{ sg_default }}'
      set_fact:
        os_cluster_security_groups: '{{ sg_default }}'


- block:
  - name: get cluster '{{ os_cluster.key }}' volume size
    set_fact:
      os_cluster_volume: "{{ os_cluster.value | map(attribute='hdd') | join(',') }}"
  rescue:
  - name: unset cluster '{{ os_cluster.key }}' volume size
    set_fact:
      os_cluster_volume: unset


- block:
  - name: set cluster '{{ os_cluster.key }}' advanced volume size
    set_fact:
      os_cluster_volume_advanced: "{{ os_cluster.value | map (attribute='hdd_adv') | join (',') }}"
  rescue:
  - name: unset cluster '{{ os_cluster.key }}' advanced volume size
    set_fact:
      os_cluster_volume_advanced: unset


- block:
  - name: get cluster '{{ os_cluster.key }}' user
    set_fact:
      os_cluster_user: "{{ os_cluster.value | map(attribute='user') | join(',') }}"
  rescue:
  - name: set cluster '{{ os_cluster.key }}' user to 'ubuntu'
    set_fact:
      os_cluster_user: ubuntu
    when: os_cluster_image is search 'ubuntu'
  - name: set cluster '{{ os_cluster.key }}' user to 'centos'
    set_fact:
      os_cluster_user: centos
    when: os_cluster_image is search 'centos'


- import_tasks: get_project_id.yml

- name: '{{ os_cluster_state }} anti-affinity group {{ os_project_name }}-{{ os_cluster.key }} in {{ os_project_name }}'
  environment:
    OS_PROJECT_ID: '{{ os_project_id }}'
  os_server_group:
    validate_certs: '{{ os_validate_certs }}'
    state: '{{ os_cluster_state }}'
    auth:
      project_name: '{{ os_project_name }}'
    name: '{{ os_project_name }}-{{ os_cluster.key }}'
    policies:
      - anti-affinity
  register: os_anti_affinity_group_id

- name: set os_anti_affinity_group_id
  set_fact:
    os_anti_affinity_group_id: '{{ os_anti_affinity_group_id.server_group.id }}'
  when: os_cluster_state != 'absent'


- block:

  - name: present advanced volumes '{{ os_cluster.key }}'
    environment:
      OS_PROJECT_ID: '{{ os_project_id }}'
    os_volume:
      size: '{{ os_cluster_volume_advanced }}'
      display_name: '{{ os_cluster.key }}-{{ item }}'
      state: '{{ os_cluster_state }}'
      validate_certs: '{{ os_validate_certs }}'
    with_sequence: count='{{ os_cluster_vm_count }}'
    when: os_cluster_state == 'present'

  - name: '{{ os_cluster_state }} {{ os_cluster.key }} with /dev/sda:{{ os_cluster_volume }}GB /dev/sdb:{{ os_cluster_volume_advanced }}GB'
    environment:
      OS_PROJECT_ID: '{{ os_project_id }}'
    vars:
      os_instance_fqdn: '{{ os_instance_fqdn_cluster }}'
    os_server:
      wait: no
      auto_ip: no
      validate_certs: '{{ os_validate_certs }}'
      boot_from_volume: yes
      terminate_volume: yes
      state: '{{ os_cluster_state }}'
      image: '{{ os_cluster_image }}'
      flavor: '{{ os_cluster_flavor }}'
      name: '{{ os_cluster.key }}-{{ item }}'
      network: '{{ os_project_name }}-net-1'
      userdata: '{{ os_userdata_defaults }}'
      volume_size: '{{ os_cluster_volume }}'
      key_name: '{{ os_project_name }}-main-keypair'
      security_groups: '{{ os_cluster_security_groups }}'
      volumes:
        - '{{ os_cluster.key }}-{{ item }}'
      scheduler_hints:
        group: '{{ os_anti_affinity_group_id }}'
      meta:
        groups: '{{ os_cluster_groups }}'
        hostname: '{{ os_cluster.key }}-{{ item }}'
        ansible_user: '{{ os_cluster_user }}'
    with_sequence: count='{{ os_cluster_vm_count }}'

  - name: absent advanced volumes '{{ os_cluster.key }}'
    environment:
      OS_PROJECT_ID: '{{ os_project_id }}'
    os_volume:
      size: '{{ os_cluster_volume_advanced }}'
      display_name: '{{ os_cluster.key }}-{{ item }}'
      state: '{{ os_cluster_state }}'
      validate_certs: '{{ os_validate_certs }}'
    with_sequence: count='{{ os_cluster_vm_count }}'
    when: os_cluster_state == 'absent'
  when:
    - os_cluster_volume_advanced is defined and os_cluster_volume_advanced != 'unset'
    - os_cluster_volume is defined and os_cluster_volume != 'unset'


- block:

  - name: present advanced volumes '{{ os_cluster.key }}'
    environment:
      OS_PROJECT_ID: '{{ os_project_id }}'
    os_volume:
      size: '{{ os_cluster_volume_advanced }}'
      display_name: '{{ os_cluster.key }}-{{ item }}'
      state: '{{ os_cluster_state }}'
      validate_certs: '{{ os_validate_certs }}'
    with_sequence: count='{{ os_cluster_vm_count }}'
    when: os_cluster_state == 'present'

  - name: '{{ os_cluster_state }} {{ os_cluster.key }} cluster in {{ os_project_name }} with /dev/sdb:{{ os_cluster_volume_advanced }}GB'
    environment:
      OS_PROJECT_ID: '{{ os_project_id }}'
    vars:
      os_instance_fqdn: '{{ os_instance_fqdn_cluster }}'
    os_server:
      wait: no
      auto_ip: no
      validate_certs: '{{ os_validate_certs }}'
      boot_from_volume: yes
      terminate_volume: yes
      state: '{{ os_cluster_state }}'
      image: '{{ os_cluster_image }}'
      flavor: '{{ os_cluster_flavor }}'
      name: '{{ os_cluster.key }}-{{ item }}'
      network: '{{ os_project_name }}-net-1'
      userdata: '{{ os_userdata_defaults }}'
      key_name: '{{ os_project_name }}-main-keypair'
      security_groups: '{{ os_cluster_security_groups }}'
      volumes:
        - '{{ os_cluster.key }}-{{ item }}'
      scheduler_hints:
        group: '{{ os_anti_affinity_group_id }}'
      meta:
        groups: '{{ os_cluster_groups }}'
        hostname: '{{ os_cluster.key }}-{{ item }}'
        ansible_user: '{{ os_cluster_user }}'
    with_sequence: count='{{ os_cluster_vm_count }}'

  - name: absent advanced volumes '{{ os_cluster.key }}'
    environment:
      OS_PROJECT_ID: '{{ os_project_id }}'
    os_volume:
      size: '{{ os_cluster_volume_advanced }}'
      display_name: '{{ os_cluster.key }}-{{ item }}'
      state: '{{ os_cluster_state }}'
      validate_certs: '{{ os_validate_certs }}'
    with_sequence: count='{{ os_cluster_vm_count }}'
    when: os_cluster_state == 'absent'

  when:
    - os_cluster_volume_advanced is defined and os_cluster_volume_advanced != 'unset'
    - os_cluster_volume is undefined or os_cluster_volume == 'unset'


- name: '{{ os_cluster_state }} {{ os_cluster.key }} cluster in {{ os_project_name }} with /dev/sda:{{ os_cluster_volume }}GB'
  environment:
    OS_PROJECT_ID: '{{ os_project_id }}'
  vars:
    os_instance_fqdn: '{{ os_instance_fqdn_cluster }}'
  os_server:
    wait: no
    auto_ip: no
    validate_certs: '{{ os_validate_certs }}'
    boot_from_volume: yes
    terminate_volume: yes
    state: '{{ os_cluster_state }}'
    image: '{{ os_cluster_image }}'
    flavor: '{{ os_cluster_flavor }}'
    name: '{{ os_cluster.key }}-{{ item }}'
    network: '{{ os_project_name }}-net-1'
    userdata: '{{ os_userdata_defaults }}'
    volume_size: '{{ os_cluster_volume }}'
    key_name: '{{ os_project_name }}-main-keypair'
    security_groups: '{{ os_cluster_security_groups }}'
    scheduler_hints:
      group: '{{ os_anti_affinity_group_id }}'
    meta:
      groups: '{{ os_cluster_groups }}'
      hostname: '{{ os_cluster.key }}-{{ item }}'
      ansible_user: '{{ os_cluster_user }}'
  with_sequence: count='{{ os_cluster_vm_count }}'
  when:
    - os_cluster_volume_advanced is undefined or os_cluster_volume_advanced == 'unset'
    - os_cluster_volume is defined and os_cluster_volume != 'unset'

- name: '{{ os_cluster_state }} {{ os_cluster.key }} cluster in {{ os_project_name }}'
  environment:
    OS_PROJECT_ID: '{{ os_project_id }}'
  vars:
    os_instance_fqdn: '{{ os_instance_fqdn_cluster }}'
  os_server:
    wait: no
    auto_ip: no
    validate_certs: '{{ os_validate_certs }}'
    state: '{{ os_cluster_state }}'
    image: '{{ os_cluster_image }}'
    flavor: '{{ os_cluster_flavor }}'
    name: '{{ os_cluster.key }}-{{ item }}'
    network: '{{ os_project_name }}-net-1'
    userdata: '{{ os_userdata_defaults }}'
    key_name: '{{ os_project_name }}-main-keypair'
    security_groups: '{{ os_cluster_security_groups }}'
    scheduler_hints:
      group: '{{ os_anti_affinity_group_id }}'
    meta:
      groups: '{{ os_cluster_groups }}'
      hostname: '{{ os_cluster.key }}-{{ item }}'
      ansible_user: '{{ os_cluster_user }}'
  with_sequence: count='{{ os_cluster_vm_count }}'
  when:
    - os_cluster_volume_advanced is undefined or os_cluster_volume_advanced == 'unset'
    - os_cluster_volume is undefined or os_cluster_volume == 'unset'
