---

- import_tasks: project.yml
  when: os_mode == 'project' or os_mode == 'all'
  tags: os_project


- name: '{{ os_project_state }} permissions to {{ os_project_name }}'
  os_user_role:
    project: '{{ os_project_name }}'
    group: '{{ item.group }}'
    role: '{{ item.role }}'
    validate_certs: '{{ os_validate_certs }}'
  loop: '{{ os_group_roles }}'
  when:
    - os_mode == 'project' or os_mode == 'roles' or os_mode == 'all'
  tags: os_user_groups


- block:

  - import_tasks: get_project_id.yml

  - name: set quotas for {{ os_project_name }}
    environment:
      OS_PROJECT_ID: '{{ os_project_id }}'
    os_quota:
      name: '{{ os_project_name }}'
      security_group_rule: '{{ os_quota_security_group_rule }}'
      security_group: '{{ os_quota_security_group }}'
      validate_certs: '{{ os_validate_certs }}'
      ram: '{{ os_quota_ram }}'
      state: present

  when: os_mode == 'porject' or os_mode == 'quota' or os_mode == 'all'
  tags: os_quotas


- block:

    - import_tasks: get_project_id.yml

    - name: '{{ os_project_state }} network in {{ os_project_name }}'
      environment:
        OS_PROJECT_ID: '{{ os_project_id }}'
      os_network:
        state: '{{ os_project_state }}'
        project: '{{ os_project_name }}'
        name: '{{ os_project_name }}-net-1'
        validate_certs: '{{ os_validate_certs }}'

    - name: '{{ os_project_state }} subnet in {{ os_project_name }}'
      environment:
        OS_PROJECT_ID: '{{ os_project_id }}'
      os_subnet:
        validate_certs: '{{ os_validate_certs }}'
        use_default_subnetpool: yes
        state: '{{ os_project_state }}'
        project: '{{ os_project_name }}'
        name: '{{ os_project_name }}-subnet-1'
        network_name: '{{ os_project_name }}-net-1'
        dns_nameservers: '{{ os_dns_name_servers }}'

    - name: '{{ os_project_state }} router in {{ os_project_name }}'
      environment:
        OS_PROJECT_ID: '{{ os_project_id }}'
      os_router:
        validate_certs: '{{ os_validate_certs }}'
        enable_snat: false
        network: os-infra-peering-cr
        name: r1-int-{{ os_project_name }}
        project: '{{ os_project_name }}'
        state: '{{ os_project_state }}'
        interfaces:
          - net: '{{ os_project_name }}-net-1'
            subnet: '{{ os_project_name }}-subnet-1'

  when: os_mode == 'porject' or os_mode == 'network' or os_mode == 'all'
  tags: os_network


- block:

    - import_tasks: get_project_id.yml

    - import_tasks: security_groups_and_rules.yml
      environment:
        OS_PROJECT_ID: '{{ os_project_id }}'

  when:
    - os_mode == 'porject' or os_mode == 'sg' or os_mode == 'all'
  tags:
    - os_security_groups
    - os_sg


- block:

    - import_tasks: get_project_id.yml

    - name: '{{ os_project_state }} keypair in {{ os_project_name }}'
      environment:
        OS_PROJECT_ID: '{{ os_project_id }}'
      os_keypair:
        validate_certs: '{{ os_validate_certs }}'
        state: '{{ os_project_state }}'
        name: '{{ os_project_name }}-main-keypair'
        public_key: '{{ os_keypair_public_key }}'

  when: os_mode == 'project' or os_mode == 'keypair' or os_mode == 'all'
  tags:
    - os_keypair


- block:

    - import_tasks: get_project_id.yml

    - name: '{{ os_project_state }} containers in {{ os_project_name }}'
      environment:
        OS_PROJECT_ID: '{{ os_project_id }}'
      os_object:
        state: '{{ os_project_state }}'
        container: '{{ item }}'
        validate_certs: '{{ os_validate_certs }}'
        verify: no
      loop: '{{ os_containers }}'

  when:
    - os_containers is defined
    - os_containers != ''
    - os_mode == 'project' or os_mode == 'container' or os_mode == 'all'
  tags:
    - os_container


- include: instances.yml
  vars:
    os_instance_state: present
  loop: '{{ os_bastion }}'
  loop_control:
    loop_var: os_instance
  when:
    - (os_bastion_state is defined and os_mode == 'instances') or os_mode == 'bastion' or os_mode == 'all'
  tags:
    - os_bastion


- include: clusters.yml
  loop: '{{ os_clusters | default ({}) | dict2items }}'
  loop_control:
    loop_var: os_cluster
  when:
    - (os_clusters is defined and os_mode == 'instances') or os_mode == 'clusters' or os_mode == 'all'
  tags:
    - os_clusters


- include: instances.yml
  loop: '{{ os_instances }}'
  loop_control:
    loop_var: os_instance
  when:
    - os_instances is defined
    - os_instances != ''
    - os_mode == 'instances'
  tags:
    - os_instances
